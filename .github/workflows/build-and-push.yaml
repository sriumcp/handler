name: Build, test and push iter8 handler

on:
  release:
    types: [published]
  push:
    branches:
      # Run tests and code-coverage/vet/lint when code is pushed to main. Publish `main` as Docker `latest` image.
      - main 
    tags:
      # Run tests and code-coverage/vet/lint when code is pushed to main. Publish `v1.2.3` tags as releases.
      - v*
  pull_request: # Run tests for any PRs.

jobs:
  # Ensure tests pass on PRs.
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Run Kubernetes tools
      uses: stefanprodan/kube-tools@v1
      with:
        kubectl: 1.18.2
        kustomize: 3.5.5
        helm: 2.16.7
        helmv3: 3.2.1
    - name: Set up Kubebuilder 2.3.1
      run: |
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        # download kubebuilder and extract it to tmp
        curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/
        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder
        export PATH=$PATH:/usr/local/kubebuilder/bin
    - name: Get Fortio
      run: go get fortio.org/fortio@v1.17.0
    - name: Test
      run: | 
        export PATH=$PATH:$(go env GOPATH)
        go test ./... -coverprofile=coverage.out
    - name: Enforce coverage
      run: |
        export COVERAGE=$(go tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "code coverage is at ${COVERAGE}"
        if [ 1 -eq "$(echo "${COVERAGE} >= 77.0" | bc)" ]; then \
          echo "all good... coverage is at or above 77.0%"; 
        else \
          echo "not good... coverage is not at 77.0% or above";
          exit 1
        fi        
    - name: Get golint
      run: go get -u golang.org/x/lint/golint
    - name: Run Vet & Lint
      run: |
        go vet ./...
        echo $(go list -f {{.Target}} golang.org/x/lint/golint)
        $(go list -f {{.Target}} golang.org/x/lint/golint) -set_exit_status=1 ./...      

  # Compute and upload code coverage
  code-coverage:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build
      run: go build .
    - name: Run Kubernetes tools
      uses: stefanprodan/kube-tools@v1
      with:
        kubectl: 1.18.2
        kustomize: 3.5.5
        helm: 2.16.7
        helmv3: 3.2.1
    - name: Set up Kubebuilder 2.3.1
      run: |
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        # download kubebuilder and extract it to tmp
        curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/
        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder
        export PATH=$PATH:/usr/local/kubebuilder/bin
    - name: Get Fortio
      run: go get fortio.org/fortio@v1.17.0
    - name: Test With Coverage
      run: go test -gcflags=-l -v  -coverprofile=coverage.txt -covermode=atomic ./...
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1

  # Push iter8-kfserving-handler image to dockerhub
  build-and-push:
    # Ensure test job passes before pushing image.		
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
    - uses: actions/checkout@v2
    - uses: docker/setup-buildx-action@v1
    - uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_SECRET }}
    - name: Get version
      run: |
        tarref=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tagref
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
          echo "VERSION=$(echo $tarref | sed -e 's/^v//')" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == *"main" ]]; then
          echo "VERSION=latest" >> $GITHUB_ENV
        fi
    - name: Get owner and repo
      run: |
        ownerrepo=${{ github.repository }}
        owner=$(echo $ownerrepo | cut -f1 -d/)
        if [[ "$owner" == "iter8-tools" ]]; then
          owner=iter8
        fi
        echo "OWNER=$owner" >> $GITHUB_ENV
        echo "REPO=$(echo $ownerrepo | cut -f2 -d/)" >> $GITHUB_ENV
    - uses: docker/build-push-action@v2
      with:
        context: .
        tags: ${{ env.OWNER }}/${{ env.REPO }}:${{ env.VERSION }}
        push: true
